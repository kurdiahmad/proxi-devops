pipeline {
    agent any

    environment {
        branchName = "main"
        gitUrl = "git@github.com:kurdiahmad/proxi-devops.git"
        gitUrlCode = "git@github.com:kurdiahmad/hash_service.git"
        serviceName = "hash_service"
        EnvName = "test"
        imageTag = "${EnvName}-${BUILD_NUMBER}"
        registryId = "849310207669"
        awsRegion = "us-east-1"
        ecrUrl = "849310207669.dkr.ecr.us-east-1.amazonaws.com"
        awsCredsId = "aws-credentials"
        gitCred = "Bitbucket-jenkins"
        configPath = "dockerfile-and-default-config"
        dockerfile = "Dockerfile-${serviceName}"
        applicationName = "hash_service"
        envName = "dev"
        configName = "dev"
        clientId = "${applicationName}-${envName}"
        namespace = "tx"
        helmDir = "slashtec/devops-tarjama/tx/${envName}/${serviceName}/helm"
    }

    stages {
        stage("Cleanup") {
            steps {
                cleanWs()
            }
        }

        stage("Debug SSH Access") {
            steps {
                script {
                    sh "ssh -vT git@github.com || true"
                }
            }
        }

        stage("Setup Parameters") {
            steps {
                script {
                    properties([
                        parameters([
                            string(
                                defaultValue: 'main',
                                name: 'branch',
                                trim: true
                            )
                        ])
                    ])
                }
            }
        }

        stage("Get Dockerfile & Config Path") {
            steps {
                script {
                    configPath = sh(script: 'echo $(pwd)', returnStdout: true).trim()
                }
            }
        }

        stage("Clone Application Code") {
            steps {
                script {
                    checkout([$class: 'GitSCM', 
                        branches: [[name: "${branchName}"]], 
                        extensions: [], 
                        userRemoteConfigs: [[
                            credentialsId: 'github-ssh',  // Ensure this matches Jenkins credentials
                            url: "${gitUrlCode}"
                        ]]
                    ])
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
