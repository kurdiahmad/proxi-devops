def branchName      =  "main"
def gitUrl          =  "git@github.com:kurdiahmad/proxi-devops.git"
def gitUrlCode      =  "git@github.com:kurdiahmad/hash_service.git"
def serviceName     =  "hash_service"
def EnvName         = "test"
def imageTag        = "${EnvName}-${BUILD_NUMBER}"
def registryId      =  "849310207669"
def awsRegion       =  "us-east-1"
def ecrUrl          =  "849310207669.dkr.ecr.us-east-1.amazonaws.com"
def awsCredsId      =  "aws-credentials"
def gitCred         =  "Bitbucket-jenkins"
def configPath      = "dockerfile-and-default-config"
def dockerfile      = "Dockerfile-${serviceName}"
//AppConfig Params
def applicationName = "hash_service"
def envName = "dev"
def configName = "dev"
def clientId = "${applicationName}"-"${envName}"

def namespace       = "tx"
def helmDir         = "slashtec/devops-tarjama/tx/${envName}/${serviceName}/helm"



node  ( ) {

stage ('cleanup')
  {
  cleanWs()
   }
  stage("Setup parameters") {
      script {
        parameters([
            string(
            defaultValue: 'main',
            name: 'branch',
            trim: true)
          ]),
    ])
        
      }
     }
  stage ("Get Dockerfile , default.config")
    {
         configPath = sh (script: 'echo $(pwd)',returnStdout: true).trim()
    }
stage("Clone Application Code") {
    steps {
        script {
            checkout([$class: 'GitSCM', 
                branches: [[name: "${BRANCH_NAME}"]], 
                extensions: [], 
                userRemoteConfigs: [[
                    credentialsId: 'github-ssh',  // Use the ID from Jenkins Credentials
                    url: "${GIT_URL_CODE}"
                ]]
            ])
        }
    }
}
