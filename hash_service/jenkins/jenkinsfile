def branchName      =  "staging"
def gitUrl          =  "git@github.com:kurdiahmad/proxi-devops.git"
def gitUrlCode      =  "git@github.com:kurdiahmad/hash_service.git"
def serviceName     =  "hash_service"
def EnvName         = "staging"
def imageTag        = "${EnvName}-${BUILD_NUMBER}"
def registryId      =  "849310207669"
def awsRegion       =  "us-east-1"
def ecrUrl          =  "849310207669.dkr.ecr.us-east-1.amazonaws.com"
def awsCredsId      =  "aws-credentials"
def gitCred         =  "Bitbucket-jenkins"
def configPath      = "dockerfile-and-default-config"
def dockerfile      = "Dockerfile-${serviceName}"
//AppConfig Params
def applicationName = "t-marketing-email"
def envName = "staging"
def configName = "staging"
def clientId = "${applicationName}"-"${envName}"

def namespace       = "tx"
def helmDir         = "slashtec/devops-tarjama/tx/${envName}/${serviceName}/helm"



node  () {


  stage("Setup parameters") {
      script {
        properties([
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '30'
            )
        ),
        disableConcurrentBuilds(),
        disableResume(),
        parameters([
            string(
            defaultValue: 'main',
            name: 'branch',
            trim: true)
          ]),
        rateLimitBuilds([count: 1, durationName: 'minute', userBoost: false])
    ])
        
      }
     }
  stage ("Get the app code")
    {
      checkout([$class: 'GitSCM', branches: [[name: "${branch}"]] , extensions: [], userRemoteConfigs: [[ url: "${gitUrlCode}"]]])    
            }
  stage('Get the Commit ID') {
            sh 'git rev-parse --short HEAD > .git/commit-id';
            commitId = readFile('.git/commit-id').trim();
            echo "commitId = ${commitId}";
        }
}

 
