def branchName      =  "main"
def gitUrl          =  "git@github.com:kurdiahmad/proxi-devops.git"
def gitUrlCode      =  "git@github.com:kurdiahmad/hash_service.git"
def serviceName     =  "hash_service"
def EnvName         = "test"
def imageTag        = "${EnvName}-${BUILD_NUMBER}"
def registryId      =  "849310207669"
def awsRegion       =  "us-east-1"
def ecrUrl          =  "849310207669.dkr.ecr.us-east-1.amazonaws.com"
def awsCredsId      =  "aws-credentials"
def gitCred         =  "Bitbucket-jenkins"
def configPath      = "dockerfile-and-default-config"
def dockerfile      = "Dockerfile-${serviceName}"
//AppConfig Params
def applicationName = "hash_service"
def envName = "dev"
def configName = "dev"
def clientId = "${applicationName}"-"${envName}"

def namespace       = "tx"
def helmDir         = "slashtec/devops-tarjama/tx/${envName}/${serviceName}/helm"



node  ( ) {

stage ('cleanup')
  {
  cleanWs()
   }
  stage("Setup parameters") {
      script {
        parameters([
            string(
            defaultValue: 'main',
            name: 'branch',
            trim: true)
          ]),
    ])
        
      }
     }
  stage ("Get Dockerfile , default.config")
    {
         configPath = sh (script: 'echo $(pwd)',returnStdout: true).trim()
    }
  stage ("Get the app code")
    {
      checkout([$class: 'GitSCM', branches: [[name: "${branch}"]] , extensions: [], userRemoteConfigs: [[ url: "${gitUrlCode}"]]])    

            }

  stage('Get the Commit ID') {
            sh 'git rev-parse --short HEAD > .git/commit-id';
            commitId = readFile('.git/commit-id').trim();
            echo "commitId = ${commitId}";
        }
  stage("Get the env varaibles from Appconfig")
  {
        sh ("aws appconfig get-configuration --application ${applicationName} --environment ${envName} --configuration ${configName} --region ${awsRegion} --client-id ${clientId} .env")
  } 
  stage ('login to ecr ')
    {
       sh("aws ecr get-login-password --region ${awsRegion}  | docker login --username AWS --password-stdin ${ecrUrl}")
    }  
  stage ('Build Docker Image')
    {
      sh ("export DOCKER_CONTENT_TRUST=1")
      sh ("docker build -t ${ecrUrl}/${serviceName}:${imageTag} -f ${dockerfile} . ")
    }
  stage ('tag Image With Commit ID '){
      sh "docker tag ${ecrUrl}/${serviceName}:${imageTag} ${ecrUrl}/${serviceName}:${imageTag}-${commitId}"
    } 
  stage('Push Docker Image To ECR')
    {
       sh("docker push ${ecrUrl}/${serviceName}:${imageTag}-${commitId}")
    } 
    // stage ("Deploy ${serviceName} to ${EnvName} Enviroment")
    // { 
    //   sh ("cd ${helmDir}; pathEnv=\".image.tag\" valueEnv=\"${imageTag}-${commitId}\" yq 'eval(strenv(pathEnv)) = strenv(valueEnv)' -i values.yaml ; cat values.yaml")
    //   sh ("cd ${helmDir}; git pull ;git add values.yaml; git commit -m 'update image tag' ;git push ${gitUrl}")

    //   sh ("helm upgrade --install -n ${namespace}  ${serviceName} ${helmDir} --set image.repository=${ecrUrl}/${serviceName} --set image.tag=${imageTag}-${commitId} --set namespace=${namespace}")
    //   sh ("kubectl -n ${namespace} rollout status deploy/${serviceName}") 
    //   sh ("kubectl scale deploy --replicas=2 ${serviceName} -n tx")  
    //   sh ("sleep 60")
    //   sh ("kubectl scale deploy --replicas=1 ${serviceName} -n tx") 

    // }
      stage ("Deploy ${serviceName} to ${EnvName} Enviroment")
    {
      sh ("cd ${helmDir}; pathEnv=\".deployment.image.tag\" valueEnv=\"${imageTag}-${commitId}\" yq 'eval(strenv(pathEnv)) = strenv(valueEnv)' -i values.yaml ")    
      sh ("cd ${helmDir}; pathEnv=\".appVersion\" valueEnv=\"${imageTag}-${commitId}\" yq 'eval(strenv(pathEnv)) = strenv(valueEnv)' -i Chart.yaml ")
      sh ("cd ${helmDir}; git pull ;git add values.yaml; git add Chart.yaml; git commit -m '${serviceName}_${namespace}_build_${BUILD_NUMBER}' ;git push ${gitUrl}")
    }
  stage('Remove Dockerfiles') 
    {
         sh "rm -f Dockerfile*"
         sh "docker rmi -f ${ecrUrl}/${serviceName}:${imageTag} || :"
         sh "docker rmi -f ${ecrUrl}/${serviceName}:${imageTag}-${commitId} || :"
    }
    // stage ('Create DB')
    // {
    //    if (params.Database_create == true) { 
    //      sh(''' export pod=`kubectl get po -n tx |grep -i "core" | awk '{print $1}'| head -1` && kubectl -n tx exec $pod  -- npm run db:create    ''')

    //    }
    // }
    //  stage ('Run migrations')
    // {  
    //    if (params.Database_migrate == true) {
    //      sh(''' sleep 15 && export pod=`kubectl get po -n tx |grep -i "core" | awk '{print $1}'| head -1` && kubectl -n tx exec $pod  -- npm run db:migrate    ''')

    //    }
    // }
    //  stage ('Seed DB')
    // {
    //    if (params.Database_seed == true) {
    //      sh(''' sleep 15 &&  export pod=`kubectl get po -n tx |grep -i "core" | awk '{print $1}'| head -1` && kubectl -n tx exec $pod  -- npm run db:seed    ''')

    //    }
    // }
    // stage ('Drop db')
    // {
    //    //sh ("docker exec -t t-core-nginx npm run db:drop")
    // } 

}
